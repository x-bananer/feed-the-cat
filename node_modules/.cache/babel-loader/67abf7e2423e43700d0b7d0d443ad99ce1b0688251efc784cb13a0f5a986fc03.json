{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport { v4 as uuidv4 } from 'uuid';\nexport const useGameStore = defineStore('game', {\n  state: () => ({\n    birdPosition: {\n      x: 100,\n      y: 300\n    },\n    birdSize: {\n      width: 60,\n      height: 60\n    },\n    birdVelocity: 0,\n    gravity: 0.5,\n    isGameOver: false,\n    isFinalNotice: false,\n    isGameRunning: false,\n    pipes: [],\n    pipeSize: {\n      width: 80,\n      gap: 200\n    },\n    rewards: [],\n    rewardSize: {\n      width: 60,\n      height: 60\n    },\n    score: 0,\n    moveSpeed: 4,\n    gameInterval: null,\n    currentCityName: '',\n    screens: {\n      start: true,\n      game: false,\n      city: false,\n      rules: false\n    }\n  }),\n  actions: {\n    setScreen(name) {\n      Object.keys(this.screens).forEach(screen => {\n        this.screens[screen] = false;\n      });\n      this.screens[name] = true;\n    },\n    setPipeWidth() {\n      const screenHeight = window.innerHeight;\n      const ratio = 100 / 844;\n      this.pipeSize.width = screenHeight * ratio;\n    },\n    fly() {\n      if (!this.isGameRunning) this.isGameRunning = true;\n      this.birdVelocity = -8;\n    },\n    fall() {\n      if (this.isGameOver || !this.isGameRunning) return;\n      this.birdVelocity += this.gravity;\n      this.birdPosition.y += this.birdVelocity;\n      const gameHeight = window.innerHeight;\n      if (this.birdPosition.y > gameHeight - this.birdSize.height || this.birdPosition.y < 0) {\n        this.playSound('./audio/hit-4.wav');\n        this.endGame();\n        return;\n      }\n      const birdRight = this.birdPosition.x + this.birdSize.width;\n      const birdBottom = this.birdPosition.y + this.birdSize.height;\n      for (const pipe of this.pipes) {\n        const pipeRight = pipe.x + this.pipeSize.width;\n        const pipeGapTop = pipe.height;\n        const pipeGapBottom = pipe.height + this.pipeSize.gap;\n        const horizontalCollision = this.birdPosition.x < pipeRight && birdRight > pipe.x;\n        const birdInGap = this.birdPosition.y > pipeGapTop && birdBottom < pipeGapBottom;\n        if (horizontalCollision && !birdInGap) {\n          this.playSound('./audio/hit-4.wav');\n          this.endGame();\n          return;\n        }\n      }\n      this.rewards = this.rewards.filter(reward => {\n        const birdRight = this.birdPosition.x + this.birdSize.width;\n        const birdBottom = this.birdPosition.y + this.birdSize.height;\n        const rewardRight = reward.x + this.rewardSize.width;\n        const rewardBottom = reward.y + this.rewardSize.height;\n        const horizontalCollision = this.birdPosition.x < rewardRight && birdRight > reward.x;\n        const verticalCollision = this.birdPosition.y < rewardBottom && birdBottom > reward.y;\n        if (horizontalCollision && verticalCollision) {\n          this.playSound('./audio/point-2.wav');\n          this.score += 1;\n          return false;\n        }\n        return true;\n      });\n      this.moveElements();\n    },\n    moveElements() {\n      this.pipes.forEach(pipe => {\n        pipe.x -= this.moveSpeed;\n      });\n      if (this.pipes.length && this.pipes[0].x + this.pipeSize.width < 0) {\n        this.pipes.shift();\n      }\n      if (!this.pipes.length || this.pipes[this.pipes.length - 1].x < window.innerWidth - 400) {\n        this.spawnPipe();\n      }\n      if (this.rewards.length === 0 || this.rewards[this.rewards.length - 1].x < window.innerWidth - 500) {\n        this.spawnReward();\n      }\n      this.rewards.forEach(reward => {\n        reward.x -= this.moveSpeed;\n      });\n      this.rewards = this.rewards.filter(reward => reward.x + this.rewardSize.width > 0);\n    },\n    spawnPipe() {\n      const pipeHeight = Math.floor(Math.random() * (window.innerHeight - this.pipeSize.gap - 100)) + 50;\n      this.pipes.push({\n        x: window.innerWidth,\n        height: pipeHeight\n      });\n    },\n    spawnReward() {\n      const maxAttempts = 100;\n      let attempts = 0;\n      let rewardX, rewardY;\n      let isOverlapping;\n      do {\n        if (attempts >= maxAttempts) return;\n        rewardX = window.innerWidth;\n        rewardY = Math.floor(Math.random() * (window.innerHeight - this.rewardSize.height));\n        isOverlapping = false;\n        for (const pipe of this.pipes) {\n          const pipeTop = pipe.height;\n          const pipeBottom = pipe.height + this.pipeSize.gap;\n          const rewardBottom = rewardY + this.rewardSize.height;\n          if (rewardX < pipe.x + this.pipeSize.width && rewardX + this.rewardSize.width > pipe.x && (rewardY < pipeTop || rewardBottom > pipeBottom)) {\n            isOverlapping = true;\n            break;\n          }\n        }\n        if (!isOverlapping) {\n          for (const reward of this.rewards) {\n            const rewardBottom = reward.y + this.rewardSize.height;\n            const newRewardBottom = rewardY + this.rewardSize.height;\n            if (rewardX < reward.x + this.rewardSize.width && rewardX + this.rewardSize.width > reward.x && rewardY < rewardBottom && newRewardBottom > reward.y) {\n              isOverlapping = true;\n              break;\n            }\n          }\n        }\n        attempts++;\n      } while (isOverlapping);\n      if (!isOverlapping) {\n        this.rewards.push({\n          id: uuidv4(),\n          x: rewardX,\n          y: rewardY\n        });\n      }\n    },\n    playSound(src) {\n      const audio = new Audio(src);\n      audio.play().catch(error => {\n        console.error('Error playing sound:', error);\n      });\n    },\n    endGame() {\n      this.isGameOver = true;\n      this.isGameRunning = false;\n      this.birdVelocity = 0;\n      clearInterval(this.gameInterval);\n      setTimeout(() => {\n        this.playSound('./audio/die-2.wav');\n      }, 100);\n      this.animateFall();\n    },\n    animateFall() {\n      const speed = 8;\n      const raiseHeight = this.birdPosition.y - 40;\n      const raiseSpeed = 5;\n      const raiseInterval = setInterval(() => {\n        if (this.birdPosition.y > raiseHeight) {\n          this.birdPosition.y -= raiseSpeed;\n        } else {\n          clearInterval(raiseInterval);\n          setTimeout(() => {\n            const fallInterval = setInterval(() => {\n              this.birdPosition.y += speed;\n              if (this.birdPosition.y > window.innerHeight + 50) {\n                clearInterval(fallInterval);\n                this.isFinalNotice = true;\n              }\n            }, 20);\n          }, 0);\n        }\n      }, 20);\n    },\n    resetGame() {\n      this.playSound('./audio/swoosh.wav');\n      this.birdPosition = {\n        x: 100,\n        y: 300\n      };\n      this.birdVelocity = 0;\n      this.isGameOver = false;\n      this.isFinalNotice = false;\n      this.isGameRunning = false;\n      this.pipes = [];\n      this.rewards = [];\n      this.score = 0;\n      this.gravity = 0.5;\n      this.spawnPipe();\n      clearInterval(this.gameInterval);\n    },\n    startGame() {\n      this.resetGame();\n      this.gameInterval = setInterval(() => {\n        if (!this.isGameRunning) return;\n        this.fall();\n      }, 20);\n    },\n    setCity(city) {\n      this.currentCityName = city;\n    },\n    resetState() {\n      this.screens = {\n        start: true,\n        game: false,\n        city: false\n      };\n      clearInterval(this.gameInterval);\n    }\n  },\n  getters: {\n    getPipeWidth: state => state.pipeSize.width\n  }\n});","map":{"version":3,"names":["defineStore","v4","uuidv4","useGameStore","state","birdPosition","x","y","birdSize","width","height","birdVelocity","gravity","isGameOver","isFinalNotice","isGameRunning","pipes","pipeSize","gap","rewards","rewardSize","score","moveSpeed","gameInterval","currentCityName","screens","start","game","city","rules","actions","setScreen","name","Object","keys","forEach","screen","setPipeWidth","screenHeight","window","innerHeight","ratio","fly","fall","gameHeight","playSound","endGame","birdRight","birdBottom","pipe","pipeRight","pipeGapTop","pipeGapBottom","horizontalCollision","birdInGap","filter","reward","rewardRight","rewardBottom","verticalCollision","moveElements","length","shift","innerWidth","spawnPipe","spawnReward","pipeHeight","Math","floor","random","push","maxAttempts","attempts","rewardX","rewardY","isOverlapping","pipeTop","pipeBottom","newRewardBottom","id","src","audio","Audio","play","catch","error","console","clearInterval","setTimeout","animateFall","speed","raiseHeight","raiseSpeed","raiseInterval","setInterval","fallInterval","resetGame","startGame","setCity","resetState","getters","getPipeWidth"],"sources":["/Users/ksenia/Desktop/PET/feed-the-cat/src/stores/gameStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const useGameStore = defineStore('game', {\n    state: () => ({\n        birdPosition: { x: 100, y: 300 },\n        birdSize: { width: 60, height: 60 },\n        birdVelocity: 0,\n        gravity: 0.5,\n        isGameOver: false,\n        isFinalNotice: false,\n        isGameRunning: false,\n        pipes: [],\n        pipeSize: { width: 80, gap: 200 },\n        rewards: [],\n        rewardSize: { width: 60, height: 60 },\n        score: 0,\n        moveSpeed: 4,\n        gameInterval: null,\n        currentCityName: '',\n        screens: {\n            start: true,\n            game: false,\n            city: false,\n            rules: false,\n        },\n    }),\n    actions: {\n        setScreen(name) {\n            Object.keys(this.screens).forEach(screen => {\n                this.screens[screen] = false;\n            });\n\n            this.screens[name] = true;\n        },\n        setPipeWidth() {\n            const screenHeight = window.innerHeight;\n            const ratio = 100 / 844;\n            this.pipeSize.width = screenHeight * ratio;\n        },\n        fly() {\n            if (!this.isGameRunning) this.isGameRunning = true;\n            this.birdVelocity = -8;\n        },\n        fall() {\n            if (this.isGameOver || !this.isGameRunning) return;\n\n            this.birdVelocity += this.gravity;\n            this.birdPosition.y += this.birdVelocity;\n\n            const gameHeight = window.innerHeight;\n\n            if (this.birdPosition.y > gameHeight - this.birdSize.height || this.birdPosition.y < 0) {\n                this.playSound('./audio/hit-4.wav');\n                this.endGame();\n                return;\n            }\n\n            const birdRight = this.birdPosition.x + this.birdSize.width;\n            const birdBottom = this.birdPosition.y + this.birdSize.height;\n\n            for (const pipe of this.pipes) {\n                const pipeRight = pipe.x + this.pipeSize.width;\n                const pipeGapTop = pipe.height;\n                const pipeGapBottom = pipe.height + this.pipeSize.gap;\n\n                const horizontalCollision = this.birdPosition.x < pipeRight && birdRight > pipe.x;\n                const birdInGap = this.birdPosition.y > pipeGapTop && birdBottom < pipeGapBottom;\n\n                if (horizontalCollision && !birdInGap) {\n                    this.playSound('./audio/hit-4.wav');\n                    this.endGame();\n                    return;\n                }\n            }\n\n            this.rewards = this.rewards.filter(reward => {\n                const birdRight = this.birdPosition.x + this.birdSize.width;\n                const birdBottom = this.birdPosition.y + this.birdSize.height;\n                const rewardRight = reward.x + this.rewardSize.width;\n                const rewardBottom = reward.y + this.rewardSize.height;\n\n                const horizontalCollision = this.birdPosition.x < rewardRight && birdRight > reward.x;\n                const verticalCollision = this.birdPosition.y < rewardBottom && birdBottom > reward.y;\n\n                if (horizontalCollision && verticalCollision) {\n                    this.playSound('./audio/point-2.wav');\n                    this.score += 1;\n                    return false;\n                }\n                return true;\n            });\n\n            this.moveElements();\n        },\n        moveElements() {\n            this.pipes.forEach(pipe => {\n                pipe.x -= this.moveSpeed;\n            });\n\n            if (this.pipes.length && this.pipes[0].x + this.pipeSize.width < 0) {\n                this.pipes.shift();\n            }\n\n            if (!this.pipes.length || this.pipes[this.pipes.length - 1].x < window.innerWidth - 400) {\n                this.spawnPipe();\n            }\n\n            if (this.rewards.length === 0 || this.rewards[this.rewards.length - 1].x < window.innerWidth - 500) {\n                this.spawnReward();\n            }\n\n            this.rewards.forEach(reward => {\n                reward.x -= this.moveSpeed;\n            });\n            this.rewards = this.rewards.filter(reward => reward.x + this.rewardSize.width > 0);\n        },\n        spawnPipe() {\n            const pipeHeight = Math.floor(Math.random() * (window.innerHeight - this.pipeSize.gap - 100)) + 50;\n            this.pipes.push({\n                x: window.innerWidth,\n                height: pipeHeight\n            });\n        },\n        spawnReward() {\n            const maxAttempts = 100;\n            let attempts = 0;\n            let rewardX, rewardY;\n            let isOverlapping;\n\n            do {\n                if (attempts >= maxAttempts) return;\n\n                rewardX = window.innerWidth;\n                rewardY = Math.floor(Math.random() * (window.innerHeight - this.rewardSize.height));\n                isOverlapping = false;\n\n                for (const pipe of this.pipes) {\n                    const pipeTop = pipe.height;\n                    const pipeBottom = pipe.height + this.pipeSize.gap;\n                    const rewardBottom = rewardY + this.rewardSize.height;\n\n                    if (\n                        rewardX < pipe.x + this.pipeSize.width && rewardX + this.rewardSize.width > pipe.x &&\n                        (rewardY < pipeTop || rewardBottom > pipeBottom)\n                    ) {\n                        isOverlapping = true;\n                        break;\n                    }\n                }\n\n                if (!isOverlapping) {\n                    for (const reward of this.rewards) {\n                        const rewardBottom = reward.y + this.rewardSize.height;\n                        const newRewardBottom = rewardY + this.rewardSize.height;\n\n                        if (\n                            rewardX < reward.x + this.rewardSize.width && rewardX + this.rewardSize.width > reward.x &&\n                            rewardY < rewardBottom && newRewardBottom > reward.y\n                        ) {\n                            isOverlapping = true;\n                            break;\n                        }\n                    }\n                }\n\n                attempts++;\n            } while (isOverlapping);\n\n            if (!isOverlapping) {\n                this.rewards.push({\n                    id: uuidv4(),\n                    x: rewardX,\n                    y: rewardY\n                });\n            }\n        },\n        playSound(src) {\n            const audio = new Audio(src);\n            audio.play().catch(error => {\n                console.error('Error playing sound:', error);\n            });\n        },\n        endGame() {\n            this.isGameOver = true;\n            this.isGameRunning = false;\n            this.birdVelocity = 0;\n\n            clearInterval(this.gameInterval);\n\n            setTimeout(() => {\n                this.playSound('./audio/die-2.wav');\n            }, 100);\n\n            this.animateFall();\n        },\n        animateFall() {\n            const speed = 8;\n            const raiseHeight = this.birdPosition.y - 40;\n            const raiseSpeed = 5;\n\n            const raiseInterval = setInterval(() => {\n                if (this.birdPosition.y > raiseHeight) {\n                    this.birdPosition.y -= raiseSpeed;\n                } else {\n                    clearInterval(raiseInterval);\n                    setTimeout(() => {\n                        const fallInterval = setInterval(() => {\n                            this.birdPosition.y += speed;\n                            if (this.birdPosition.y > window.innerHeight + 50) {\n                                clearInterval(fallInterval);\n                                this.isFinalNotice = true;\n                            }\n                        }, 20);\n                    }, 0);\n                }\n            }, 20);\n        },\n        resetGame() {\n            this.playSound('./audio/swoosh.wav');\n            this.birdPosition = { x: 100, y: 300 };\n            this.birdVelocity = 0;\n            this.isGameOver = false;\n            this.isFinalNotice = false;\n            this.isGameRunning = false;\n            this.pipes = [];\n            this.rewards = [];\n            this.score = 0;\n            this.gravity = 0.5;\n            this.spawnPipe();\n\n            clearInterval(this.gameInterval);\n        },\n        startGame() {\n            this.resetGame();\n            this.gameInterval = setInterval(() => {\n                if (!this.isGameRunning) return;\n                this.fall();\n            }, 20);\n        },\n        setCity(city) {\n            this.currentCityName = city;\n        },\n        resetState() {\n            this.screens = {\n                start: true,\n                game: false,\n                city: false,\n            };\n\n            clearInterval(this.gameInterval);\n        }\n    },\n    getters: {\n        getPipeWidth: (state) => state.pipeSize.width,\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}